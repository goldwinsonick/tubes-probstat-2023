# Confidence Interval One Sample
def ci_p(phat, n, alpha=0.05):
    z_halfAlpha = st.norm.ppf(1-(alpha/2))
    pval = st.norm.ppf(z_)
    marginErr = z_halfAlpha((phat*(1-phat)/n)**0.5)
    lb = phat-marginErr
    ub = phat+marginErr
    if(lb<phat and phat<ub):
        conclusion = "Fail to Reject H0"
    else:
        conclusion = "Reject H0"
    ans = "Z-Value: {}\nConfidence Interval: {} < p < {}\nConclusion: {}".format(z_halfAlpha, lb, ub, conclusion)
    return ans

# Confidence Interval One Sample (Series)
def ci_p_series(phat_series, n, alpha=0.05):
    z_halfAlpha = st.norm.ppf(1-(alpha/2))
    lbDict = {}
    ubDict = {}
    for key, phat in phat_series.items():
        marginErr = z_halfAlpha*((phat*(1-phat)/n)**0.5)
        lbDict[key] = phat-marginErr
        ubDict[key] = phat+marginErr
    return (z_halfAlpha, pd.concat([phat_series.rename("Proportion"), pd.Series(lbDict, name="Lower"), pd.Series(ubDict, name="Upper")], axis=1).reset_index())

# Chi Square Goodness of Fit
def chiSqGoF(series, alpha=0.05): # Basically.. Is this series uniform???
    # Calculating
    n = len(series)
    nsum = series.sum()
    Ei = 1/len(series)*nsum
    chisq = 0
    for key, Oi in series.items():
        oiei2ei = ((Oi-Ei)**2 / Ei)
        chisq += oiei2ei
    chi2_alpha = st.chi2.ppf(1-alpha, n-1)
    pval = (1 - st.chi2.cdf(chisq, n-1))
    
    # Conclusion
    if(chisq > chi2_alpha):
        conclusion = "Fail to Reject H0"
    else:
        conclusion = "Reject H0"

    ans = "".format(conclusion)

    return ans

# Confidence Interval On Sample
def ci_p2(x1, x2, n1, n2, alpha=0.05):
    phat = (x1+x2)/(n1+n2)
    phat1 = x1/n1
    phat2 = x2/n2
    z_halfAlpha = st.norm.ppf(1-(alpha/2))
    z = (phat1-phat2)/(phat*(1-phat)*(1/n1 + 1/n2))**0.5

    lb = -z_halfAlpha
    ub = z_halfAlpha
    if(lb<phat and phat<ub):
        conclusion = "Fail to Reject H0"
    else:
        conclusion = "Reject H0"

    ans = "Z-Value: {}\nConfidence Interval: {} < p < {}\nConclusion: {}".format(lb, ub, conclusion)
    return 

# Chi Square Independence
def chiSqTest(df_cont, alpha=0.05): # Basically, Is the value of A affects B?
    Ei = df_cont.copy()
    for s in df_cont.index:
        for o in df_cont.columns:
            Ei.loc[s,o] = df_cont.loc[s].sum() * df_cont.loc[:,o].sum() / df_cont.values.sum()
        
    row, col = df_cont.shape
    df = (row-1)*(col-1)
    chi2 = ((df_cont - Ei)**2/Ei).sum().sum()
    chi2_alpha = st.chi2.ppf(1-alpha, df)
    pval = 1 - st.chi2.cdf(chi2, df)
    print(chi2, chi2_alpha, pval)